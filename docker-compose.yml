version: '3.1'
services:
    nginx:
      image: nginx
      container_name: nginx
      volumes:
        - ./ngnix/default.conf:/etc/nginx/conf.d/default.conf
        - ./certs:/certs
      networks:
        internal:
          aliases:
            - ngnix-app
      ports:
        - 443:443
        - 80:80
      depends_on:
        flask:
          condition: service_healthy
    flask:
      build:
          context: ./flask/
          dockerfile: Dockerfile
      image: flask
      container_name: flask
      depends_on:
        postgres:
          condition: service_healthy
      healthcheck:
        test: ["CMD-SHELL", "curl localhost:5000"]
        interval: 5s
        timeout: 5s
        retries: 5
      volumes:
          - ./flask/:/code/
      env_file:
      - ./variables.env
      environment:
          FLASK_APP: /code/app.py
      command: flask run --host=0.0.0.0
      networks:
        internal:
          aliases:
            - flask-app
      ports:
          - 5000:5000
    postgres:
      restart: always
      image: postgres
      container_name: postgres
      env_file:
      - ./variables.env
      networks:
          internal:
            aliases:
              - postgres-app
      ports:
        - "5432:5432"
      volumes:
        - pg_data:/var/lib/postgresql/data/
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U flask -d scanning_api"]
        interval: 5s
        timeout: 5s
        retries: 5
#    certbot:
#      image: certbot/certbot:arm32v6-nightly
#      container_name: certbot
#      volumes:
#        - ~/Dev/merakiApiScanning/certs/etc/letsencrypt:/etc/letsencrypt 
#        - ~/Dev/merakiApiScanning/certs/var/lib/letsencrypt:/var/lib/letsencrypt
#      command: renew --dry-run --force-renewal
#      networks:
#        internal:
#          aliases:
#            - certbot-app
#      ports:
#        - 80:80
    grafana:
      image: "grafana/grafana"
      container_name: grafana
      env_file:
      - ./variables.env
      volumes:
        - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      ports:
        - 3000:3000
      user: '472'
      networks:
          internal:
            aliases:
              - grafana-app

networks:
  internal:
    name: internal
volumes:
  pg_data:
    name: pg_data
